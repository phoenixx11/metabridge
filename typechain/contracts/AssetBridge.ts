/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface AssetBridgeInterface extends utils.Interface {
  functions: {
    "assetCount()": FunctionFragment;
    "assets(uint256)": FunctionFragment;
    "bridgeAsset(address,uint256)": FunctionFragment;
    "collateralizeAsset(uint256,uint256)": FunctionFragment;
    "endRental(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rentAsset(uint256,uint256)": FunctionFragment;
    "rentals(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawAsset(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "assetCount"
      | "assets"
      | "bridgeAsset"
      | "collateralizeAsset"
      | "endRental"
      | "owner"
      | "renounceOwnership"
      | "rentAsset"
      | "rentals"
      | "transferOwnership"
      | "withdrawAsset"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "assetCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeAsset",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralizeAsset",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endRental",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rentAsset",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rentals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAsset",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "assetCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bridgeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralizeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endRental", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rentAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rentals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAsset",
    data: BytesLike
  ): Result;

  events: {
    "AssetBridged(uint256,address,address,uint256)": EventFragment;
    "AssetCollateralized(uint256,address,uint256)": EventFragment;
    "AssetRentalEnded(uint256,address)": EventFragment;
    "AssetRentalStarted(uint256,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetBridged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetCollateralized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetRentalEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetRentalStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface AssetBridgedEventObject {
  assetId: BigNumber;
  user: string;
  contractAddress: string;
  tokenId: BigNumber;
}
export type AssetBridgedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  AssetBridgedEventObject
>;

export type AssetBridgedEventFilter = TypedEventFilter<AssetBridgedEvent>;

export interface AssetCollateralizedEventObject {
  assetId: BigNumber;
  user: string;
  collateralValue: BigNumber;
}
export type AssetCollateralizedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  AssetCollateralizedEventObject
>;

export type AssetCollateralizedEventFilter =
  TypedEventFilter<AssetCollateralizedEvent>;

export interface AssetRentalEndedEventObject {
  assetId: BigNumber;
  renter: string;
}
export type AssetRentalEndedEvent = TypedEvent<
  [BigNumber, string],
  AssetRentalEndedEventObject
>;

export type AssetRentalEndedEventFilter =
  TypedEventFilter<AssetRentalEndedEvent>;

export interface AssetRentalStartedEventObject {
  assetId: BigNumber;
  renter: string;
  rentalPeriod: BigNumber;
}
export type AssetRentalStartedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  AssetRentalStartedEventObject
>;

export type AssetRentalStartedEventFilter =
  TypedEventFilter<AssetRentalStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface AssetBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AssetBridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    assetCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    assets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, boolean] & {
        owner: string;
        contractAddress: string;
        tokenId: BigNumber;
        collateralValue: BigNumber;
        isCollateralized: boolean;
      }
    >;

    bridgeAsset(
      _contractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    collateralizeAsset(
      _assetId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    endRental(
      _assetId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rentAsset(
      _assetId: BigNumberish,
      _rentalPeriod: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    rentals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        renter: string;
        rentalPeriod: BigNumber;
        rentalStart: BigNumber;
        isActive: boolean;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawAsset(
      _assetId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  assetCount(overrides?: CallOverrides): Promise<BigNumber>;

  assets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, boolean] & {
      owner: string;
      contractAddress: string;
      tokenId: BigNumber;
      collateralValue: BigNumber;
      isCollateralized: boolean;
    }
  >;

  bridgeAsset(
    _contractAddress: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  collateralizeAsset(
    _assetId: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  endRental(
    _assetId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rentAsset(
    _assetId: BigNumberish,
    _rentalPeriod: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  rentals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean] & {
      renter: string;
      rentalPeriod: BigNumber;
      rentalStart: BigNumber;
      isActive: boolean;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawAsset(
    _assetId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    assetCount(overrides?: CallOverrides): Promise<BigNumber>;

    assets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, boolean] & {
        owner: string;
        contractAddress: string;
        tokenId: BigNumber;
        collateralValue: BigNumber;
        isCollateralized: boolean;
      }
    >;

    bridgeAsset(
      _contractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collateralizeAsset(
      _assetId: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    endRental(_assetId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rentAsset(
      _assetId: BigNumberish,
      _rentalPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rentals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        renter: string;
        rentalPeriod: BigNumber;
        rentalStart: BigNumber;
        isActive: boolean;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAsset(
      _assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssetBridged(uint256,address,address,uint256)"(
      assetId?: BigNumberish | null,
      user?: string | null,
      contractAddress?: null,
      tokenId?: null
    ): AssetBridgedEventFilter;
    AssetBridged(
      assetId?: BigNumberish | null,
      user?: string | null,
      contractAddress?: null,
      tokenId?: null
    ): AssetBridgedEventFilter;

    "AssetCollateralized(uint256,address,uint256)"(
      assetId?: BigNumberish | null,
      user?: string | null,
      collateralValue?: null
    ): AssetCollateralizedEventFilter;
    AssetCollateralized(
      assetId?: BigNumberish | null,
      user?: string | null,
      collateralValue?: null
    ): AssetCollateralizedEventFilter;

    "AssetRentalEnded(uint256,address)"(
      assetId?: BigNumberish | null,
      renter?: string | null
    ): AssetRentalEndedEventFilter;
    AssetRentalEnded(
      assetId?: BigNumberish | null,
      renter?: string | null
    ): AssetRentalEndedEventFilter;

    "AssetRentalStarted(uint256,address,uint256)"(
      assetId?: BigNumberish | null,
      renter?: string | null,
      rentalPeriod?: null
    ): AssetRentalStartedEventFilter;
    AssetRentalStarted(
      assetId?: BigNumberish | null,
      renter?: string | null,
      rentalPeriod?: null
    ): AssetRentalStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    assetCount(overrides?: CallOverrides): Promise<BigNumber>;

    assets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    bridgeAsset(
      _contractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    collateralizeAsset(
      _assetId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    endRental(
      _assetId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rentAsset(
      _assetId: BigNumberish,
      _rentalPeriod: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    rentals(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawAsset(
      _assetId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assetCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bridgeAsset(
      _contractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    collateralizeAsset(
      _assetId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    endRental(
      _assetId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rentAsset(
      _assetId: BigNumberish,
      _rentalPeriod: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rentals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawAsset(
      _assetId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
